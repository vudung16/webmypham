{
  "version": 3,
  "sources": ["browser-external:fs", "browser-external:path", "browser-external:os", "../dotenv/lib/main.js", "dep:dotenv"],
  "sourcesContent": ["export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"fs\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"path\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"os\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "const fs = require('fs')\r\nconst path = require('path')\r\nconst os = require('os')\r\n\r\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\r\n\r\n// Parser src into an Object\r\nfunction parse (src) {\r\n  const obj = {}\r\n\r\n  // Convert buffer to string\r\n  let lines = src.toString()\r\n\r\n  // Convert line breaks to same format\r\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\r\n\r\n  let match\r\n  while ((match = LINE.exec(lines)) != null) {\r\n    const key = match[1]\r\n\r\n    // Default undefined or null to empty string\r\n    let value = (match[2] || '')\r\n\r\n    // Remove whitespace\r\n    value = value.trim()\r\n\r\n    // Check if double quoted\r\n    const maybeQuote = value[0]\r\n\r\n    // Remove surrounding quotes\r\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\r\n\r\n    // Expand newlines if double quoted\r\n    if (maybeQuote === '\"') {\r\n      value = value.replace(/\\\\n/g, '\\n')\r\n      value = value.replace(/\\\\r/g, '\\r')\r\n    }\r\n\r\n    // Add to object\r\n    obj[key] = value\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nfunction _log (message) {\r\n  console.log(`[dotenv][DEBUG] ${message}`)\r\n}\r\n\r\nfunction _resolveHome (envPath) {\r\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\r\n}\r\n\r\n// Populates process.env from .env file\r\nfunction config (options) {\r\n  let dotenvPath = path.resolve(process.cwd(), '.env')\r\n  let encoding = 'utf8'\r\n  const debug = Boolean(options && options.debug)\r\n  const override = Boolean(options && options.override)\r\n\r\n  if (options) {\r\n    if (options.path != null) {\r\n      dotenvPath = _resolveHome(options.path)\r\n    }\r\n    if (options.encoding != null) {\r\n      encoding = options.encoding\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Specifying an encoding returns a string instead of a buffer\r\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\r\n\r\n    Object.keys(parsed).forEach(function (key) {\r\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\r\n        process.env[key] = parsed[key]\r\n      } else {\r\n        if (override === true) {\r\n          process.env[key] = parsed[key]\r\n        }\r\n\r\n        if (debug) {\r\n          if (override === true) {\r\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\r\n          } else {\r\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    return { parsed }\r\n  } catch (e) {\r\n    if (debug) {\r\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\r\n    }\r\n\r\n    return { error: e }\r\n  }\r\n}\r\n\r\nconst DotenvModule = {\r\n  config,\r\n  parse\r\n}\r\n\r\nmodule.exports.config = DotenvModule.config\r\nmodule.exports.parse = DotenvModule.parse\r\nmodule.exports = DotenvModule\r\n", "export default require(\"./node_modules/dotenv/lib/main.js\");"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,IAAO;AAAP;AAAA;AAAA;AAAA,IAAO,aAAQ,IAAI,MAAM,IAAI;AAAA,MAC3B,MAAM;AACJ,cAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;;;ACFpB;AAAA;AAAA;AAAA;AAAA,IAAO;AAAP;AAAA;AAAA;AAAA,IAAO,eAAQ,IAAI,MAAM,IAAI;AAAA,MAC3B,MAAM;AACJ,cAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;;;ACFpB;AAAA;AAAA;AAAA;AAAA,IAAO;AAAP;AAAA;AAAA;AAAA,IAAO,aAAQ,IAAI,MAAM,IAAI;AAAA,MAC3B,MAAM;AACJ,cAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;;;ACFpB;AAAA;AAAA;AAAA,QAAM,KAAK;AACX,QAAM,OAAO;AACb,QAAM,KAAK;AAEX,QAAM,OAAO;AAGb,mBAAgB,KAAK;AACnB,YAAM,MAAM;AAGZ,UAAI,QAAQ,IAAI;AAGhB,cAAQ,MAAM,QAAQ,WAAW;AAEjC,UAAI;AACJ,aAAQ,SAAQ,KAAK,KAAK,WAAW,MAAM;AACzC,cAAM,MAAM,MAAM;AAGlB,YAAI,QAAS,MAAM,MAAM;AAGzB,gBAAQ,MAAM;AAGd,cAAM,aAAa,MAAM;AAGzB,gBAAQ,MAAM,QAAQ,0BAA0B;AAGhD,YAAI,eAAe,KAAK;AACtB,kBAAQ,MAAM,QAAQ,QAAQ;AAC9B,kBAAQ,MAAM,QAAQ,QAAQ;AAAA;AAIhC,YAAI,OAAO;AAAA;AAGb,aAAO;AAAA;AAGT,kBAAe,SAAS;AACtB,cAAQ,IAAI,mBAAmB;AAAA;AAGjC,0BAAuB,SAAS;AAC9B,aAAO,QAAQ,OAAO,MAAM,KAAK,KAAK,GAAG,WAAW,QAAQ,MAAM,MAAM;AAAA;AAI1E,oBAAiB,SAAS;AACxB,UAAI,aAAa,KAAK,QAAQ,QAAQ,OAAO;AAC7C,UAAI,WAAW;AACf,YAAM,QAAQ,QAAQ,WAAW,QAAQ;AACzC,YAAM,WAAW,QAAQ,WAAW,QAAQ;AAE5C,UAAI,SAAS;AACX,YAAI,QAAQ,QAAQ,MAAM;AACxB,uBAAa,aAAa,QAAQ;AAAA;AAEpC,YAAI,QAAQ,YAAY,MAAM;AAC5B,qBAAW,QAAQ;AAAA;AAAA;AAIvB,UAAI;AAEF,cAAM,SAAS,aAAa,MAAM,GAAG,aAAa,YAAY,EAAE;AAEhE,eAAO,KAAK,QAAQ,QAAQ,SAAU,KAAK;AACzC,cAAI,CAAC,OAAO,UAAU,eAAe,KAAK,4BAAa,MAAM;AAC3D,uCAAY,OAAO,OAAO;AAAA,iBACrB;AACL,gBAAI,aAAa,MAAM;AACrB,yCAAY,OAAO,OAAO;AAAA;AAG5B,gBAAI,OAAO;AACT,kBAAI,aAAa,MAAM;AACrB,qBAAK,IAAI;AAAA,qBACJ;AACL,qBAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAMjB,eAAO,EAAE;AAAA,eACF,GAAP;AACA,YAAI,OAAO;AACT,eAAK,kBAAkB,cAAc,EAAE;AAAA;AAGzC,eAAO,EAAE,OAAO;AAAA;AAAA;AAIpB,QAAM,eAAe;AAAA,MACnB;AAAA,MACA;AAAA;AAGF,WAAO,QAAQ,SAAS,aAAa;AACrC,WAAO,QAAQ,QAAQ,aAAa;AACpC,WAAO,UAAU;AAAA;AAAA;;;AC5GjB;AAAA,IAAO,iBAAQ;",
  "names": []
}
