{
  "version": 3,
  "sources": ["../@ctrl/tinycolor/dist/module/util.js", "../@ctrl/tinycolor/dist/module/conversion.js", "../@ctrl/tinycolor/dist/module/css-color-names.js", "../@ctrl/tinycolor/dist/module/format-input.js", "../@ctrl/tinycolor/dist/module/index.js", "../@ctrl/tinycolor/dist/module/readability.js", "../@ctrl/tinycolor/dist/module/to-ms-filter.js", "../@ctrl/tinycolor/dist/module/from-ratio.js", "../@ctrl/tinycolor/dist/module/random.js", "../@ctrl/tinycolor/dist/module/interfaces.js", "../@ctrl/tinycolor/dist/module/public_api.js", "../@ant-design/colors/dist/index.esm.js"],
  "sourcesContent": ["/**\r\n * Take input from [0, n] and return it as [0, 1]\r\n * @hidden\r\n */\r\nexport function bound01(n, max) {\r\n    if (isOnePointZero(n)) {\r\n        n = '100%';\r\n    }\r\n    var isPercent = isPercentage(n);\r\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\r\n    // Automatically convert percentage into number\r\n    if (isPercent) {\r\n        n = parseInt(String(n * max), 10) / 100;\r\n    }\r\n    // Handle floating point rounding errors\r\n    if (Math.abs(n - max) < 0.000001) {\r\n        return 1;\r\n    }\r\n    // Convert into [0, 1] range if it isn't already\r\n    if (max === 360) {\r\n        // If n is a hue given in degrees,\r\n        // wrap around out-of-range values into [0, 360] range\r\n        // then convert into [0, 1].\r\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\r\n    }\r\n    else {\r\n        // If n not a hue given in degrees\r\n        // Convert into [0, 1] range if it isn't already.\r\n        n = (n % max) / parseFloat(String(max));\r\n    }\r\n    return n;\r\n}\r\n/**\r\n * Force a number between 0 and 1\r\n * @hidden\r\n */\r\nexport function clamp01(val) {\r\n    return Math.min(1, Math.max(0, val));\r\n}\r\n/**\r\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n * @hidden\r\n */\r\nexport function isOnePointZero(n) {\r\n    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\r\n}\r\n/**\r\n * Check to see if string passed in is a percentage\r\n * @hidden\r\n */\r\nexport function isPercentage(n) {\r\n    return typeof n === 'string' && n.indexOf('%') !== -1;\r\n}\r\n/**\r\n * Return a valid alpha value [0,1] with all invalid values being set to 1\r\n * @hidden\r\n */\r\nexport function boundAlpha(a) {\r\n    a = parseFloat(a);\r\n    if (isNaN(a) || a < 0 || a > 1) {\r\n        a = 1;\r\n    }\r\n    return a;\r\n}\r\n/**\r\n * Replace a decimal with it's percentage value\r\n * @hidden\r\n */\r\nexport function convertToPercentage(n) {\r\n    if (n <= 1) {\r\n        return Number(n) * 100 + \"%\";\r\n    }\r\n    return n;\r\n}\r\n/**\r\n * Force a hex value to have 2 characters\r\n * @hidden\r\n */\r\nexport function pad2(c) {\r\n    return c.length === 1 ? '0' + c : String(c);\r\n}\r\n", "import { bound01, pad2 } from './util';\r\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n/**\r\n * Handle bounds / percentage checking to conform to CSS color spec\r\n * <http://www.w3.org/TR/css3-color/>\r\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n * *Returns:* { r, g, b } in [0, 255]\r\n */\r\nexport function rgbToRgb(r, g, b) {\r\n    return {\r\n        r: bound01(r, 255) * 255,\r\n        g: bound01(g, 255) * 255,\r\n        b: bound01(b, 255) * 255,\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSL.\r\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n * *Returns:* { h, s, l } in [0,1]\r\n */\r\nexport function rgbToHsl(r, g, b) {\r\n    r = bound01(r, 255);\r\n    g = bound01(g, 255);\r\n    b = bound01(b, 255);\r\n    var max = Math.max(r, g, b);\r\n    var min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var l = (max + min) / 2;\r\n    if (max === min) {\r\n        s = 0;\r\n        h = 0; // achromatic\r\n    }\r\n    else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return { h: h, s: s, l: l };\r\n}\r\nfunction hue2rgb(p, q, t) {\r\n    if (t < 0) {\r\n        t += 1;\r\n    }\r\n    if (t > 1) {\r\n        t -= 1;\r\n    }\r\n    if (t < 1 / 6) {\r\n        return p + (q - p) * (6 * t);\r\n    }\r\n    if (t < 1 / 2) {\r\n        return q;\r\n    }\r\n    if (t < 2 / 3) {\r\n        return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n    return p;\r\n}\r\n/**\r\n * Converts an HSL color value to RGB.\r\n *\r\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n * *Returns:* { r, g, b } in the set [0, 255]\r\n */\r\nexport function hslToRgb(h, s, l) {\r\n    var r;\r\n    var g;\r\n    var b;\r\n    h = bound01(h, 360);\r\n    s = bound01(s, 100);\r\n    l = bound01(l, 100);\r\n    if (s === 0) {\r\n        // achromatic\r\n        g = l;\r\n        b = l;\r\n        r = l;\r\n    }\r\n    else {\r\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        var p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n    return { r: r * 255, g: g * 255, b: b * 255 };\r\n}\r\n/**\r\n * Converts an RGB color value to HSV\r\n *\r\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n * *Returns:* { h, s, v } in [0,1]\r\n */\r\nexport function rgbToHsv(r, g, b) {\r\n    r = bound01(r, 255);\r\n    g = bound01(g, 255);\r\n    b = bound01(b, 255);\r\n    var max = Math.max(r, g, b);\r\n    var min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var v = max;\r\n    var d = max - min;\r\n    var s = max === 0 ? 0 : d / max;\r\n    if (max === min) {\r\n        h = 0; // achromatic\r\n    }\r\n    else {\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return { h: h, s: s, v: v };\r\n}\r\n/**\r\n * Converts an HSV color value to RGB.\r\n *\r\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n * *Returns:* { r, g, b } in the set [0, 255]\r\n */\r\nexport function hsvToRgb(h, s, v) {\r\n    h = bound01(h, 360) * 6;\r\n    s = bound01(s, 100);\r\n    v = bound01(v, 100);\r\n    var i = Math.floor(h);\r\n    var f = h - i;\r\n    var p = v * (1 - s);\r\n    var q = v * (1 - f * s);\r\n    var t = v * (1 - (1 - f) * s);\r\n    var mod = i % 6;\r\n    var r = [v, q, p, p, t, v][mod];\r\n    var g = [t, v, v, q, p, p][mod];\r\n    var b = [p, p, t, v, v, q][mod];\r\n    return { r: r * 255, g: g * 255, b: b * 255 };\r\n}\r\n/**\r\n * Converts an RGB color to hex\r\n *\r\n * Assumes r, g, and b are contained in the set [0, 255]\r\n * Returns a 3 or 6 character hex\r\n */\r\nexport function rgbToHex(r, g, b, allow3Char) {\r\n    var hex = [\r\n        pad2(Math.round(r).toString(16)),\r\n        pad2(Math.round(g).toString(16)),\r\n        pad2(Math.round(b).toString(16)),\r\n    ];\r\n    // Return a 3 character hex if possible\r\n    if (allow3Char &&\r\n        hex[0].startsWith(hex[0].charAt(1)) &&\r\n        hex[1].startsWith(hex[1].charAt(1)) &&\r\n        hex[2].startsWith(hex[2].charAt(1))) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n    }\r\n    return hex.join('');\r\n}\r\n/**\r\n * Converts an RGBA color plus alpha transparency to hex\r\n *\r\n * Assumes r, g, b are contained in the set [0, 255] and\r\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function rgbaToHex(r, g, b, a, allow4Char) {\r\n    var hex = [\r\n        pad2(Math.round(r).toString(16)),\r\n        pad2(Math.round(g).toString(16)),\r\n        pad2(Math.round(b).toString(16)),\r\n        pad2(convertDecimalToHex(a)),\r\n    ];\r\n    // Return a 4 character hex if possible\r\n    if (allow4Char &&\r\n        hex[0].startsWith(hex[0].charAt(1)) &&\r\n        hex[1].startsWith(hex[1].charAt(1)) &&\r\n        hex[2].startsWith(hex[2].charAt(1)) &&\r\n        hex[3].startsWith(hex[3].charAt(1))) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\r\n    }\r\n    return hex.join('');\r\n}\r\n/**\r\n * Converts an RGBA color to an ARGB Hex8 string\r\n * Rarely used, but required for \"toFilter()\"\r\n */\r\nexport function rgbaToArgbHex(r, g, b, a) {\r\n    var hex = [\r\n        pad2(convertDecimalToHex(a)),\r\n        pad2(Math.round(r).toString(16)),\r\n        pad2(Math.round(g).toString(16)),\r\n        pad2(Math.round(b).toString(16)),\r\n    ];\r\n    return hex.join('');\r\n}\r\n/** Converts a decimal to a hex value */\r\nexport function convertDecimalToHex(d) {\r\n    return Math.round(parseFloat(d) * 255).toString(16);\r\n}\r\n/** Converts a hex value to a decimal */\r\nexport function convertHexToDecimal(h) {\r\n    return parseIntFromHex(h) / 255;\r\n}\r\n/** Parse a base-16 hex value into a base-10 integer */\r\nexport function parseIntFromHex(val) {\r\n    return parseInt(val, 16);\r\n}\r\nexport function numberInputToObject(color) {\r\n    return {\r\n        r: color >> 16,\r\n        g: (color & 0xff00) >> 8,\r\n        b: color & 0xff,\r\n    };\r\n}\r\n", "// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\r\n/**\r\n * @hidden\r\n */\r\nexport var names = {\r\n    aliceblue: '#f0f8ff',\r\n    antiquewhite: '#faebd7',\r\n    aqua: '#00ffff',\r\n    aquamarine: '#7fffd4',\r\n    azure: '#f0ffff',\r\n    beige: '#f5f5dc',\r\n    bisque: '#ffe4c4',\r\n    black: '#000000',\r\n    blanchedalmond: '#ffebcd',\r\n    blue: '#0000ff',\r\n    blueviolet: '#8a2be2',\r\n    brown: '#a52a2a',\r\n    burlywood: '#deb887',\r\n    cadetblue: '#5f9ea0',\r\n    chartreuse: '#7fff00',\r\n    chocolate: '#d2691e',\r\n    coral: '#ff7f50',\r\n    cornflowerblue: '#6495ed',\r\n    cornsilk: '#fff8dc',\r\n    crimson: '#dc143c',\r\n    cyan: '#00ffff',\r\n    darkblue: '#00008b',\r\n    darkcyan: '#008b8b',\r\n    darkgoldenrod: '#b8860b',\r\n    darkgray: '#a9a9a9',\r\n    darkgreen: '#006400',\r\n    darkgrey: '#a9a9a9',\r\n    darkkhaki: '#bdb76b',\r\n    darkmagenta: '#8b008b',\r\n    darkolivegreen: '#556b2f',\r\n    darkorange: '#ff8c00',\r\n    darkorchid: '#9932cc',\r\n    darkred: '#8b0000',\r\n    darksalmon: '#e9967a',\r\n    darkseagreen: '#8fbc8f',\r\n    darkslateblue: '#483d8b',\r\n    darkslategray: '#2f4f4f',\r\n    darkslategrey: '#2f4f4f',\r\n    darkturquoise: '#00ced1',\r\n    darkviolet: '#9400d3',\r\n    deeppink: '#ff1493',\r\n    deepskyblue: '#00bfff',\r\n    dimgray: '#696969',\r\n    dimgrey: '#696969',\r\n    dodgerblue: '#1e90ff',\r\n    firebrick: '#b22222',\r\n    floralwhite: '#fffaf0',\r\n    forestgreen: '#228b22',\r\n    fuchsia: '#ff00ff',\r\n    gainsboro: '#dcdcdc',\r\n    ghostwhite: '#f8f8ff',\r\n    goldenrod: '#daa520',\r\n    gold: '#ffd700',\r\n    gray: '#808080',\r\n    green: '#008000',\r\n    greenyellow: '#adff2f',\r\n    grey: '#808080',\r\n    honeydew: '#f0fff0',\r\n    hotpink: '#ff69b4',\r\n    indianred: '#cd5c5c',\r\n    indigo: '#4b0082',\r\n    ivory: '#fffff0',\r\n    khaki: '#f0e68c',\r\n    lavenderblush: '#fff0f5',\r\n    lavender: '#e6e6fa',\r\n    lawngreen: '#7cfc00',\r\n    lemonchiffon: '#fffacd',\r\n    lightblue: '#add8e6',\r\n    lightcoral: '#f08080',\r\n    lightcyan: '#e0ffff',\r\n    lightgoldenrodyellow: '#fafad2',\r\n    lightgray: '#d3d3d3',\r\n    lightgreen: '#90ee90',\r\n    lightgrey: '#d3d3d3',\r\n    lightpink: '#ffb6c1',\r\n    lightsalmon: '#ffa07a',\r\n    lightseagreen: '#20b2aa',\r\n    lightskyblue: '#87cefa',\r\n    lightslategray: '#778899',\r\n    lightslategrey: '#778899',\r\n    lightsteelblue: '#b0c4de',\r\n    lightyellow: '#ffffe0',\r\n    lime: '#00ff00',\r\n    limegreen: '#32cd32',\r\n    linen: '#faf0e6',\r\n    magenta: '#ff00ff',\r\n    maroon: '#800000',\r\n    mediumaquamarine: '#66cdaa',\r\n    mediumblue: '#0000cd',\r\n    mediumorchid: '#ba55d3',\r\n    mediumpurple: '#9370db',\r\n    mediumseagreen: '#3cb371',\r\n    mediumslateblue: '#7b68ee',\r\n    mediumspringgreen: '#00fa9a',\r\n    mediumturquoise: '#48d1cc',\r\n    mediumvioletred: '#c71585',\r\n    midnightblue: '#191970',\r\n    mintcream: '#f5fffa',\r\n    mistyrose: '#ffe4e1',\r\n    moccasin: '#ffe4b5',\r\n    navajowhite: '#ffdead',\r\n    navy: '#000080',\r\n    oldlace: '#fdf5e6',\r\n    olive: '#808000',\r\n    olivedrab: '#6b8e23',\r\n    orange: '#ffa500',\r\n    orangered: '#ff4500',\r\n    orchid: '#da70d6',\r\n    palegoldenrod: '#eee8aa',\r\n    palegreen: '#98fb98',\r\n    paleturquoise: '#afeeee',\r\n    palevioletred: '#db7093',\r\n    papayawhip: '#ffefd5',\r\n    peachpuff: '#ffdab9',\r\n    peru: '#cd853f',\r\n    pink: '#ffc0cb',\r\n    plum: '#dda0dd',\r\n    powderblue: '#b0e0e6',\r\n    purple: '#800080',\r\n    rebeccapurple: '#663399',\r\n    red: '#ff0000',\r\n    rosybrown: '#bc8f8f',\r\n    royalblue: '#4169e1',\r\n    saddlebrown: '#8b4513',\r\n    salmon: '#fa8072',\r\n    sandybrown: '#f4a460',\r\n    seagreen: '#2e8b57',\r\n    seashell: '#fff5ee',\r\n    sienna: '#a0522d',\r\n    silver: '#c0c0c0',\r\n    skyblue: '#87ceeb',\r\n    slateblue: '#6a5acd',\r\n    slategray: '#708090',\r\n    slategrey: '#708090',\r\n    snow: '#fffafa',\r\n    springgreen: '#00ff7f',\r\n    steelblue: '#4682b4',\r\n    tan: '#d2b48c',\r\n    teal: '#008080',\r\n    thistle: '#d8bfd8',\r\n    tomato: '#ff6347',\r\n    turquoise: '#40e0d0',\r\n    violet: '#ee82ee',\r\n    wheat: '#f5deb3',\r\n    white: '#ffffff',\r\n    whitesmoke: '#f5f5f5',\r\n    yellow: '#ffff00',\r\n    yellowgreen: '#9acd32',\r\n};\r\n", "import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb } from './conversion';\r\nimport { names } from './css-color-names';\r\nimport { boundAlpha, convertToPercentage } from './util';\r\n/**\r\n * Given a string or object, convert that input to RGB\r\n *\r\n * Possible string inputs:\r\n * ```\r\n * \"red\"\r\n * \"#f00\" or \"f00\"\r\n * \"#ff0000\" or \"ff0000\"\r\n * \"#ff000000\" or \"ff000000\"\r\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n * ```\r\n */\r\nexport function inputToRGB(color) {\r\n    var rgb = { r: 0, g: 0, b: 0 };\r\n    var a = 1;\r\n    var s = null;\r\n    var v = null;\r\n    var l = null;\r\n    var ok = false;\r\n    var format = false;\r\n    if (typeof color === 'string') {\r\n        color = stringInputToObject(color);\r\n    }\r\n    if (typeof color === 'object') {\r\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\r\n            rgb = rgbToRgb(color.r, color.g, color.b);\r\n            ok = true;\r\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\r\n        }\r\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\r\n            s = convertToPercentage(color.s);\r\n            v = convertToPercentage(color.v);\r\n            rgb = hsvToRgb(color.h, s, v);\r\n            ok = true;\r\n            format = 'hsv';\r\n        }\r\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\r\n            s = convertToPercentage(color.s);\r\n            l = convertToPercentage(color.l);\r\n            rgb = hslToRgb(color.h, s, l);\r\n            ok = true;\r\n            format = 'hsl';\r\n        }\r\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\r\n            a = color.a;\r\n        }\r\n    }\r\n    a = boundAlpha(a);\r\n    return {\r\n        ok: ok,\r\n        format: color.format || format,\r\n        r: Math.min(255, Math.max(rgb.r, 0)),\r\n        g: Math.min(255, Math.max(rgb.g, 0)),\r\n        b: Math.min(255, Math.max(rgb.b, 0)),\r\n        a: a,\r\n    };\r\n}\r\n// <http://www.w3.org/TR/css3-values/#integers>\r\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\r\n// <http://www.w3.org/TR/css3-values/#number-value>\r\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\r\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\nvar CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n// Actual matching.\r\n// Parentheses and commas are optional, but not required.\r\n// Whitespace can take the place of commas or opening paren\r\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\nvar matchers = {\r\n    CSS_UNIT: new RegExp(CSS_UNIT),\r\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\r\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\r\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\r\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\r\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\r\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\r\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n};\r\n/**\r\n * Permissive string parsing.  Take in a number of formats, and output an object\r\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n */\r\nexport function stringInputToObject(color) {\r\n    color = color.trim().toLowerCase();\r\n    if (color.length === 0) {\r\n        return false;\r\n    }\r\n    var named = false;\r\n    if (names[color]) {\r\n        color = names[color];\r\n        named = true;\r\n    }\r\n    else if (color === 'transparent') {\r\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\r\n    }\r\n    // Try to match string input using regular expressions.\r\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n    // Just return an object and let the conversion functions handle that.\r\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n    var match = matchers.rgb.exec(color);\r\n    if (match) {\r\n        return { r: match[1], g: match[2], b: match[3] };\r\n    }\r\n    match = matchers.rgba.exec(color);\r\n    if (match) {\r\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n    }\r\n    match = matchers.hsl.exec(color);\r\n    if (match) {\r\n        return { h: match[1], s: match[2], l: match[3] };\r\n    }\r\n    match = matchers.hsla.exec(color);\r\n    if (match) {\r\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n    }\r\n    match = matchers.hsv.exec(color);\r\n    if (match) {\r\n        return { h: match[1], s: match[2], v: match[3] };\r\n    }\r\n    match = matchers.hsva.exec(color);\r\n    if (match) {\r\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n    }\r\n    match = matchers.hex8.exec(color);\r\n    if (match) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: convertHexToDecimal(match[4]),\r\n            format: named ? 'name' : 'hex8',\r\n        };\r\n    }\r\n    match = matchers.hex6.exec(color);\r\n    if (match) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            format: named ? 'name' : 'hex',\r\n        };\r\n    }\r\n    match = matchers.hex4.exec(color);\r\n    if (match) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + match[1]),\r\n            g: parseIntFromHex(match[2] + match[2]),\r\n            b: parseIntFromHex(match[3] + match[3]),\r\n            a: convertHexToDecimal(match[4] + match[4]),\r\n            format: named ? 'name' : 'hex8',\r\n        };\r\n    }\r\n    match = matchers.hex3.exec(color);\r\n    if (match) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + match[1]),\r\n            g: parseIntFromHex(match[2] + match[2]),\r\n            b: parseIntFromHex(match[3] + match[3]),\r\n            format: named ? 'name' : 'hex',\r\n        };\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Check to see if it looks like a CSS unit\r\n * (see `matchers` above for definition).\r\n */\r\nexport function isValidCSSUnit(color) {\r\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\r\n}\r\n", "import { rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv, numberInputToObject } from './conversion';\r\nimport { names } from './css-color-names';\r\nimport { inputToRGB } from './format-input';\r\nimport { bound01, boundAlpha, clamp01 } from './util';\r\nvar TinyColor = /** @class */ (function () {\r\n    function TinyColor(color, opts) {\r\n        if (color === void 0) { color = ''; }\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a;\r\n        // If input is already a tinycolor, return itself\r\n        if (color instanceof TinyColor) {\r\n            // eslint-disable-next-line no-constructor-return\r\n            return color;\r\n        }\r\n        if (typeof color === 'number') {\r\n            color = numberInputToObject(color);\r\n        }\r\n        this.originalInput = color;\r\n        var rgb = inputToRGB(color);\r\n        this.originalInput = color;\r\n        this.r = rgb.r;\r\n        this.g = rgb.g;\r\n        this.b = rgb.b;\r\n        this.a = rgb.a;\r\n        this.roundA = Math.round(100 * this.a) / 100;\r\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\r\n        this.gradientType = opts.gradientType;\r\n        // Don't let the range of [0,255] come back in [0,1].\r\n        // Potentially lose a little bit of precision here, but will fix issues where\r\n        // .5 gets interpreted as half of the total, instead of half of 1\r\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n        if (this.r < 1) {\r\n            this.r = Math.round(this.r);\r\n        }\r\n        if (this.g < 1) {\r\n            this.g = Math.round(this.g);\r\n        }\r\n        if (this.b < 1) {\r\n            this.b = Math.round(this.b);\r\n        }\r\n        this.isValid = rgb.ok;\r\n    }\r\n    TinyColor.prototype.isDark = function () {\r\n        return this.getBrightness() < 128;\r\n    };\r\n    TinyColor.prototype.isLight = function () {\r\n        return !this.isDark();\r\n    };\r\n    /**\r\n     * Returns the perceived brightness of the color, from 0-255.\r\n     */\r\n    TinyColor.prototype.getBrightness = function () {\r\n        // http://www.w3.org/TR/AERT#color-contrast\r\n        var rgb = this.toRgb();\r\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n    };\r\n    /**\r\n     * Returns the perceived luminance of a color, from 0-1.\r\n     */\r\n    TinyColor.prototype.getLuminance = function () {\r\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n        var rgb = this.toRgb();\r\n        var R;\r\n        var G;\r\n        var B;\r\n        var RsRGB = rgb.r / 255;\r\n        var GsRGB = rgb.g / 255;\r\n        var BsRGB = rgb.b / 255;\r\n        if (RsRGB <= 0.03928) {\r\n            R = RsRGB / 12.92;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-exponentiation-operator\r\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\r\n        }\r\n        if (GsRGB <= 0.03928) {\r\n            G = GsRGB / 12.92;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-exponentiation-operator\r\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\r\n        }\r\n        if (BsRGB <= 0.03928) {\r\n            B = BsRGB / 12.92;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-exponentiation-operator\r\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\r\n        }\r\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n    };\r\n    /**\r\n     * Returns the alpha value of a color, from 0-1.\r\n     */\r\n    TinyColor.prototype.getAlpha = function () {\r\n        return this.a;\r\n    };\r\n    /**\r\n     * Sets the alpha value on the current color.\r\n     *\r\n     * @param alpha - The new alpha value. The accepted range is 0-1.\r\n     */\r\n    TinyColor.prototype.setAlpha = function (alpha) {\r\n        this.a = boundAlpha(alpha);\r\n        this.roundA = Math.round(100 * this.a) / 100;\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns the object as a HSVA object.\r\n     */\r\n    TinyColor.prototype.toHsv = function () {\r\n        var hsv = rgbToHsv(this.r, this.g, this.b);\r\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\r\n    };\r\n    /**\r\n     * Returns the hsva values interpolated into a string with the following format:\r\n     * \"hsva(xxx, xxx, xxx, xx)\".\r\n     */\r\n    TinyColor.prototype.toHsvString = function () {\r\n        var hsv = rgbToHsv(this.r, this.g, this.b);\r\n        var h = Math.round(hsv.h * 360);\r\n        var s = Math.round(hsv.s * 100);\r\n        var v = Math.round(hsv.v * 100);\r\n        return this.a === 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this.roundA + \")\";\r\n    };\r\n    /**\r\n     * Returns the object as a HSLA object.\r\n     */\r\n    TinyColor.prototype.toHsl = function () {\r\n        var hsl = rgbToHsl(this.r, this.g, this.b);\r\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\r\n    };\r\n    /**\r\n     * Returns the hsla values interpolated into a string with the following format:\r\n     * \"hsla(xxx, xxx, xxx, xx)\".\r\n     */\r\n    TinyColor.prototype.toHslString = function () {\r\n        var hsl = rgbToHsl(this.r, this.g, this.b);\r\n        var h = Math.round(hsl.h * 360);\r\n        var s = Math.round(hsl.s * 100);\r\n        var l = Math.round(hsl.l * 100);\r\n        return this.a === 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this.roundA + \")\";\r\n    };\r\n    /**\r\n     * Returns the hex value of the color.\r\n     * @param allow3Char will shorten hex value to 3 char if possible\r\n     */\r\n    TinyColor.prototype.toHex = function (allow3Char) {\r\n        if (allow3Char === void 0) { allow3Char = false; }\r\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\r\n    };\r\n    /**\r\n     * Returns the hex value of the color -with a # appened.\r\n     * @param allow3Char will shorten hex value to 3 char if possible\r\n     */\r\n    TinyColor.prototype.toHexString = function (allow3Char) {\r\n        if (allow3Char === void 0) { allow3Char = false; }\r\n        return '#' + this.toHex(allow3Char);\r\n    };\r\n    /**\r\n     * Returns the hex 8 value of the color.\r\n     * @param allow4Char will shorten hex value to 4 char if possible\r\n     */\r\n    TinyColor.prototype.toHex8 = function (allow4Char) {\r\n        if (allow4Char === void 0) { allow4Char = false; }\r\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n    };\r\n    /**\r\n     * Returns the hex 8 value of the color -with a # appened.\r\n     * @param allow4Char will shorten hex value to 4 char if possible\r\n     */\r\n    TinyColor.prototype.toHex8String = function (allow4Char) {\r\n        if (allow4Char === void 0) { allow4Char = false; }\r\n        return '#' + this.toHex8(allow4Char);\r\n    };\r\n    /**\r\n     * Returns the object as a RGBA object.\r\n     */\r\n    TinyColor.prototype.toRgb = function () {\r\n        return {\r\n            r: Math.round(this.r),\r\n            g: Math.round(this.g),\r\n            b: Math.round(this.b),\r\n            a: this.a,\r\n        };\r\n    };\r\n    /**\r\n     * Returns the RGBA values interpolated into a string with the following format:\r\n     * \"RGBA(xxx, xxx, xxx, xx)\".\r\n     */\r\n    TinyColor.prototype.toRgbString = function () {\r\n        var r = Math.round(this.r);\r\n        var g = Math.round(this.g);\r\n        var b = Math.round(this.b);\r\n        return this.a === 1 ? \"rgb(\" + r + \", \" + g + \", \" + b + \")\" : \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + this.roundA + \")\";\r\n    };\r\n    /**\r\n     * Returns the object as a RGBA object.\r\n     */\r\n    TinyColor.prototype.toPercentageRgb = function () {\r\n        var fmt = function (x) { return Math.round(bound01(x, 255) * 100) + \"%\"; };\r\n        return {\r\n            r: fmt(this.r),\r\n            g: fmt(this.g),\r\n            b: fmt(this.b),\r\n            a: this.a,\r\n        };\r\n    };\r\n    /**\r\n     * Returns the RGBA relative values interpolated into a string\r\n     */\r\n    TinyColor.prototype.toPercentageRgbString = function () {\r\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\r\n        return this.a === 1\r\n            ? \"rgb(\" + rnd(this.r) + \"%, \" + rnd(this.g) + \"%, \" + rnd(this.b) + \"%)\"\r\n            : \"rgba(\" + rnd(this.r) + \"%, \" + rnd(this.g) + \"%, \" + rnd(this.b) + \"%, \" + this.roundA + \")\";\r\n    };\r\n    /**\r\n     * The 'real' name of the color -if there is one.\r\n     */\r\n    TinyColor.prototype.toName = function () {\r\n        if (this.a === 0) {\r\n            return 'transparent';\r\n        }\r\n        if (this.a < 1) {\r\n            return false;\r\n        }\r\n        var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\r\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\r\n            var _b = _a[_i], key = _b[0], value = _b[1];\r\n            if (hex === value) {\r\n                return key;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    TinyColor.prototype.toString = function (format) {\r\n        var formatSet = Boolean(format);\r\n        format = format !== null && format !== void 0 ? format : this.format;\r\n        var formattedString = false;\r\n        var hasAlpha = this.a < 1 && this.a >= 0;\r\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\r\n        if (needsAlphaFormat) {\r\n            // Special case for \"transparent\", all other non-alpha formats\r\n            // will return rgba when there is transparency.\r\n            if (format === 'name' && this.a === 0) {\r\n                return this.toName();\r\n            }\r\n            return this.toRgbString();\r\n        }\r\n        if (format === 'rgb') {\r\n            formattedString = this.toRgbString();\r\n        }\r\n        if (format === 'prgb') {\r\n            formattedString = this.toPercentageRgbString();\r\n        }\r\n        if (format === 'hex' || format === 'hex6') {\r\n            formattedString = this.toHexString();\r\n        }\r\n        if (format === 'hex3') {\r\n            formattedString = this.toHexString(true);\r\n        }\r\n        if (format === 'hex4') {\r\n            formattedString = this.toHex8String(true);\r\n        }\r\n        if (format === 'hex8') {\r\n            formattedString = this.toHex8String();\r\n        }\r\n        if (format === 'name') {\r\n            formattedString = this.toName();\r\n        }\r\n        if (format === 'hsl') {\r\n            formattedString = this.toHslString();\r\n        }\r\n        if (format === 'hsv') {\r\n            formattedString = this.toHsvString();\r\n        }\r\n        return formattedString || this.toHexString();\r\n    };\r\n    TinyColor.prototype.toNumber = function () {\r\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\r\n    };\r\n    TinyColor.prototype.clone = function () {\r\n        return new TinyColor(this.toString());\r\n    };\r\n    /**\r\n     * Lighten the color a given amount. Providing 100 will always return white.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.lighten = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.l += amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Brighten the color a given amount, from 0 to 100.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.brighten = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var rgb = this.toRgb();\r\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\r\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\r\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\r\n        return new TinyColor(rgb);\r\n    };\r\n    /**\r\n     * Darken the color a given amount, from 0 to 100.\r\n     * Providing 100 will always return black.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.darken = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.l -= amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Mix the color with pure white, from 0 to 100.\r\n     * Providing 0 will do nothing, providing 100 will always return white.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.tint = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        return this.mix('white', amount);\r\n    };\r\n    /**\r\n     * Mix the color with pure black, from 0 to 100.\r\n     * Providing 0 will do nothing, providing 100 will always return black.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.shade = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        return this.mix('black', amount);\r\n    };\r\n    /**\r\n     * Desaturate the color a given amount, from 0 to 100.\r\n     * Providing 100 will is the same as calling greyscale\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.desaturate = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.s -= amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Saturate the color a given amount, from 0 to 100.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.saturate = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.s += amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Completely desaturates a color into greyscale.\r\n     * Same as calling `desaturate(100)`\r\n     */\r\n    TinyColor.prototype.greyscale = function () {\r\n        return this.desaturate(100);\r\n    };\r\n    /**\r\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n     * Values outside of this range will be wrapped into this range.\r\n     */\r\n    TinyColor.prototype.spin = function (amount) {\r\n        var hsl = this.toHsl();\r\n        var hue = (hsl.h + amount) % 360;\r\n        hsl.h = hue < 0 ? 360 + hue : hue;\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Mix the current color a given amount with another color, from 0 to 100.\r\n     * 0 means no mixing (return current color).\r\n     */\r\n    TinyColor.prototype.mix = function (color, amount) {\r\n        if (amount === void 0) { amount = 50; }\r\n        var rgb1 = this.toRgb();\r\n        var rgb2 = new TinyColor(color).toRgb();\r\n        var p = amount / 100;\r\n        var rgba = {\r\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\r\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\r\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\r\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\r\n        };\r\n        return new TinyColor(rgba);\r\n    };\r\n    TinyColor.prototype.analogous = function (results, slices) {\r\n        if (results === void 0) { results = 6; }\r\n        if (slices === void 0) { slices = 30; }\r\n        var hsl = this.toHsl();\r\n        var part = 360 / slices;\r\n        var ret = [this];\r\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\r\n            hsl.h = (hsl.h + part) % 360;\r\n            ret.push(new TinyColor(hsl));\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\r\n     */\r\n    TinyColor.prototype.complement = function () {\r\n        var hsl = this.toHsl();\r\n        hsl.h = (hsl.h + 180) % 360;\r\n        return new TinyColor(hsl);\r\n    };\r\n    TinyColor.prototype.monochromatic = function (results) {\r\n        if (results === void 0) { results = 6; }\r\n        var hsv = this.toHsv();\r\n        var h = hsv.h;\r\n        var s = hsv.s;\r\n        var v = hsv.v;\r\n        var res = [];\r\n        var modification = 1 / results;\r\n        while (results--) {\r\n            res.push(new TinyColor({ h: h, s: s, v: v }));\r\n            v = (v + modification) % 1;\r\n        }\r\n        return res;\r\n    };\r\n    TinyColor.prototype.splitcomplement = function () {\r\n        var hsl = this.toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            this,\r\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\r\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\r\n        ];\r\n    };\r\n    /**\r\n     * Compute how the color would appear on a background\r\n     */\r\n    TinyColor.prototype.onBackground = function (background) {\r\n        var fg = this.toRgb();\r\n        var bg = new TinyColor(background).toRgb();\r\n        return new TinyColor({\r\n            r: bg.r + (fg.r - bg.r) * fg.a,\r\n            g: bg.g + (fg.g - bg.g) * fg.a,\r\n            b: bg.b + (fg.b - bg.b) * fg.a,\r\n        });\r\n    };\r\n    /**\r\n     * Alias for `polyad(3)`\r\n     */\r\n    TinyColor.prototype.triad = function () {\r\n        return this.polyad(3);\r\n    };\r\n    /**\r\n     * Alias for `polyad(4)`\r\n     */\r\n    TinyColor.prototype.tetrad = function () {\r\n        return this.polyad(4);\r\n    };\r\n    /**\r\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\r\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\r\n     */\r\n    TinyColor.prototype.polyad = function (n) {\r\n        var hsl = this.toHsl();\r\n        var h = hsl.h;\r\n        var result = [this];\r\n        var increment = 360 / n;\r\n        for (var i = 1; i < n; i++) {\r\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * compare color vs current color\r\n     */\r\n    TinyColor.prototype.equals = function (color) {\r\n        return this.toRgbString() === new TinyColor(color).toRgbString();\r\n    };\r\n    return TinyColor;\r\n}());\r\nexport { TinyColor };\r\n// kept for backwards compatability with v1\r\nexport function tinycolor(color, opts) {\r\n    if (color === void 0) { color = ''; }\r\n    if (opts === void 0) { opts = {}; }\r\n    return new TinyColor(color, opts);\r\n}\r\n", "import { TinyColor } from './index';\r\n// Readability Functions\r\n// ---------------------\r\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\r\n/**\r\n * AKA `contrast`\r\n *\r\n * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\r\n */\r\nexport function readability(color1, color2) {\r\n    var c1 = new TinyColor(color1);\r\n    var c2 = new TinyColor(color2);\r\n    return ((Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /\r\n        (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05));\r\n}\r\n/**\r\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\r\n * The third argument is an object.\r\n *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\r\n *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\r\n * If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\r\n *\r\n * Example\r\n * ```ts\r\n * new TinyColor().isReadable('#000', '#111') => false\r\n * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false\r\n * ```\r\n */\r\nexport function isReadable(color1, color2, wcag2) {\r\n    var _a, _b;\r\n    if (wcag2 === void 0) { wcag2 = { level: 'AA', size: 'small' }; }\r\n    var readabilityLevel = readability(color1, color2);\r\n    switch (((_a = wcag2.level) !== null && _a !== void 0 ? _a : 'AA') + ((_b = wcag2.size) !== null && _b !== void 0 ? _b : 'small')) {\r\n        case 'AAsmall':\r\n        case 'AAAlarge':\r\n            return readabilityLevel >= 4.5;\r\n        case 'AAlarge':\r\n            return readabilityLevel >= 3;\r\n        case 'AAAsmall':\r\n            return readabilityLevel >= 7;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n/**\r\n * Given a base color and a list of possible foreground or background\r\n * colors for that base, returns the most readable color.\r\n * Optionally returns Black or White if the most readable color is unreadable.\r\n *\r\n * @param baseColor - the base color.\r\n * @param colorList - array of colors to pick the most readable one from.\r\n * @param args - and object with extra arguments\r\n *\r\n * Example\r\n * ```ts\r\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'], { includeFallbackColors: false }).toHexString(); // \"#112255\"\r\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'],{ includeFallbackColors: true }).toHexString();  // \"#ffffff\"\r\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // \"#faf3f3\"\r\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // \"#ffffff\"\r\n * ```\r\n */\r\nexport function mostReadable(baseColor, colorList, args) {\r\n    if (args === void 0) { args = { includeFallbackColors: false, level: 'AA', size: 'small' }; }\r\n    var bestColor = null;\r\n    var bestScore = 0;\r\n    var includeFallbackColors = args.includeFallbackColors, level = args.level, size = args.size;\r\n    for (var _i = 0, colorList_1 = colorList; _i < colorList_1.length; _i++) {\r\n        var color = colorList_1[_i];\r\n        var score = readability(baseColor, color);\r\n        if (score > bestScore) {\r\n            bestScore = score;\r\n            bestColor = new TinyColor(color);\r\n        }\r\n    }\r\n    if (isReadable(baseColor, bestColor, { level: level, size: size }) || !includeFallbackColors) {\r\n        return bestColor;\r\n    }\r\n    args.includeFallbackColors = false;\r\n    return mostReadable(baseColor, ['#fff', '#000'], args);\r\n}\r\n", "import { rgbaToArgbHex } from './conversion';\r\nimport { TinyColor } from './index';\r\n/**\r\n * Returns the color represented as a Microsoft filter for use in old versions of IE.\r\n */\r\nexport function toMsFilter(firstColor, secondColor) {\r\n    var color = new TinyColor(firstColor);\r\n    var hex8String = '#' + rgbaToArgbHex(color.r, color.g, color.b, color.a);\r\n    var secondHex8String = hex8String;\r\n    var gradientType = color.gradientType ? 'GradientType = 1, ' : '';\r\n    if (secondColor) {\r\n        var s = new TinyColor(secondColor);\r\n        secondHex8String = '#' + rgbaToArgbHex(s.r, s.g, s.b, s.a);\r\n    }\r\n    return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\r\n}\r\n", "import { TinyColor } from './index';\r\nimport { convertToPercentage } from './util';\r\n/**\r\n * If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n * String input requires \"1.0\" as input, so 1 will be treated as 1\r\n */\r\nexport function fromRatio(ratio, opts) {\r\n    var newColor = {\r\n        r: convertToPercentage(ratio.r),\r\n        g: convertToPercentage(ratio.g),\r\n        b: convertToPercentage(ratio.b),\r\n    };\r\n    if (ratio.a !== undefined) {\r\n        newColor.a = Number(ratio.a);\r\n    }\r\n    return new TinyColor(newColor, opts);\r\n}\r\n/** old random function */\r\nexport function legacyRandom() {\r\n    return new TinyColor({\r\n        r: Math.random(),\r\n        g: Math.random(),\r\n        b: Math.random(),\r\n    });\r\n}\r\n", "// randomColor by David Merfield under the CC0 license\r\n// https://github.com/davidmerfield/randomColor/\r\nimport { TinyColor } from './index';\r\nexport function random(options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Check if we need to generate multiple colors\r\n    if (options.count !== undefined &&\r\n        options.count !== null) {\r\n        var totalColors = options.count;\r\n        var colors = [];\r\n        options.count = undefined;\r\n        while (totalColors > colors.length) {\r\n            // Since we're generating multiple colors,\r\n            // incremement the seed. Otherwise we'd just\r\n            // generate the same color each time...\r\n            options.count = null;\r\n            if (options.seed) {\r\n                options.seed += 1;\r\n            }\r\n            colors.push(random(options));\r\n        }\r\n        options.count = totalColors;\r\n        return colors;\r\n    }\r\n    // First we pick a hue (H)\r\n    var h = pickHue(options.hue, options.seed);\r\n    // Then use H to determine saturation (S)\r\n    var s = pickSaturation(h, options);\r\n    // Then use S and H to determine brightness (B).\r\n    var v = pickBrightness(h, s, options);\r\n    var res = { h: h, s: s, v: v };\r\n    if (options.alpha !== undefined) {\r\n        res.a = options.alpha;\r\n    }\r\n    // Then we return the HSB color in the desired format\r\n    return new TinyColor(res);\r\n}\r\nfunction pickHue(hue, seed) {\r\n    var hueRange = getHueRange(hue);\r\n    var res = randomWithin(hueRange, seed);\r\n    // Instead of storing red as two seperate ranges,\r\n    // we group them, using negative numbers\r\n    if (res < 0) {\r\n        res = 360 + res;\r\n    }\r\n    return res;\r\n}\r\nfunction pickSaturation(hue, options) {\r\n    if (options.hue === 'monochrome') {\r\n        return 0;\r\n    }\r\n    if (options.luminosity === 'random') {\r\n        return randomWithin([0, 100], options.seed);\r\n    }\r\n    var saturationRange = getColorInfo(hue).saturationRange;\r\n    var sMin = saturationRange[0];\r\n    var sMax = saturationRange[1];\r\n    switch (options.luminosity) {\r\n        case 'bright':\r\n            sMin = 55;\r\n            break;\r\n        case 'dark':\r\n            sMin = sMax - 10;\r\n            break;\r\n        case 'light':\r\n            sMax = 55;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return randomWithin([sMin, sMax], options.seed);\r\n}\r\nfunction pickBrightness(H, S, options) {\r\n    var bMin = getMinimumBrightness(H, S);\r\n    var bMax = 100;\r\n    switch (options.luminosity) {\r\n        case 'dark':\r\n            bMax = bMin + 20;\r\n            break;\r\n        case 'light':\r\n            bMin = (bMax + bMin) / 2;\r\n            break;\r\n        case 'random':\r\n            bMin = 0;\r\n            bMax = 100;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return randomWithin([bMin, bMax], options.seed);\r\n}\r\nfunction getMinimumBrightness(H, S) {\r\n    var lowerBounds = getColorInfo(H).lowerBounds;\r\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\r\n        var s1 = lowerBounds[i][0];\r\n        var v1 = lowerBounds[i][1];\r\n        var s2 = lowerBounds[i + 1][0];\r\n        var v2 = lowerBounds[i + 1][1];\r\n        if (S >= s1 && S <= s2) {\r\n            var m = (v2 - v1) / (s2 - s1);\r\n            var b = v1 - m * s1;\r\n            return m * S + b;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nfunction getHueRange(colorInput) {\r\n    var num = parseInt(colorInput, 10);\r\n    if (!Number.isNaN(num) && num < 360 && num > 0) {\r\n        return [num, num];\r\n    }\r\n    if (typeof colorInput === 'string') {\r\n        var namedColor = bounds.find(function (n) { return n.name === colorInput; });\r\n        if (namedColor) {\r\n            var color = defineColor(namedColor);\r\n            if (color.hueRange) {\r\n                return color.hueRange;\r\n            }\r\n        }\r\n        var parsed = new TinyColor(colorInput);\r\n        if (parsed.isValid) {\r\n            var hue = parsed.toHsv().h;\r\n            return [hue, hue];\r\n        }\r\n    }\r\n    return [0, 360];\r\n}\r\nfunction getColorInfo(hue) {\r\n    // Maps red colors to make picking hue easier\r\n    if (hue >= 334 && hue <= 360) {\r\n        hue -= 360;\r\n    }\r\n    for (var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++) {\r\n        var bound = bounds_1[_i];\r\n        var color = defineColor(bound);\r\n        if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {\r\n            return color;\r\n        }\r\n    }\r\n    throw Error('Color not found');\r\n}\r\nfunction randomWithin(range, seed) {\r\n    if (seed === undefined) {\r\n        return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));\r\n    }\r\n    // Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n    var max = range[1] || 1;\r\n    var min = range[0] || 0;\r\n    seed = (seed * 9301 + 49297) % 233280;\r\n    var rnd = seed / 233280.0;\r\n    return Math.floor(min + rnd * (max - min));\r\n}\r\nfunction defineColor(bound) {\r\n    var sMin = bound.lowerBounds[0][0];\r\n    var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];\r\n    var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];\r\n    var bMax = bound.lowerBounds[0][1];\r\n    return {\r\n        name: bound.name,\r\n        hueRange: bound.hueRange,\r\n        lowerBounds: bound.lowerBounds,\r\n        saturationRange: [sMin, sMax],\r\n        brightnessRange: [bMin, bMax],\r\n    };\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport var bounds = [\r\n    {\r\n        name: 'monochrome',\r\n        hueRange: null,\r\n        lowerBounds: [\r\n            [0, 0],\r\n            [100, 0],\r\n        ],\r\n    },\r\n    {\r\n        name: 'red',\r\n        hueRange: [-26, 18],\r\n        lowerBounds: [\r\n            [20, 100],\r\n            [30, 92],\r\n            [40, 89],\r\n            [50, 85],\r\n            [60, 78],\r\n            [70, 70],\r\n            [80, 60],\r\n            [90, 55],\r\n            [100, 50],\r\n        ],\r\n    },\r\n    {\r\n        name: 'orange',\r\n        hueRange: [19, 46],\r\n        lowerBounds: [\r\n            [20, 100],\r\n            [30, 93],\r\n            [40, 88],\r\n            [50, 86],\r\n            [60, 85],\r\n            [70, 70],\r\n            [100, 70],\r\n        ],\r\n    },\r\n    {\r\n        name: 'yellow',\r\n        hueRange: [47, 62],\r\n        lowerBounds: [\r\n            [25, 100],\r\n            [40, 94],\r\n            [50, 89],\r\n            [60, 86],\r\n            [70, 84],\r\n            [80, 82],\r\n            [90, 80],\r\n            [100, 75],\r\n        ],\r\n    },\r\n    {\r\n        name: 'green',\r\n        hueRange: [63, 178],\r\n        lowerBounds: [\r\n            [30, 100],\r\n            [40, 90],\r\n            [50, 85],\r\n            [60, 81],\r\n            [70, 74],\r\n            [80, 64],\r\n            [90, 50],\r\n            [100, 40],\r\n        ],\r\n    },\r\n    {\r\n        name: 'blue',\r\n        hueRange: [179, 257],\r\n        lowerBounds: [\r\n            [20, 100],\r\n            [30, 86],\r\n            [40, 80],\r\n            [50, 74],\r\n            [60, 60],\r\n            [70, 52],\r\n            [80, 44],\r\n            [90, 39],\r\n            [100, 35],\r\n        ],\r\n    },\r\n    {\r\n        name: 'purple',\r\n        hueRange: [258, 282],\r\n        lowerBounds: [\r\n            [20, 100],\r\n            [30, 87],\r\n            [40, 79],\r\n            [50, 70],\r\n            [60, 65],\r\n            [70, 59],\r\n            [80, 52],\r\n            [90, 45],\r\n            [100, 42],\r\n        ],\r\n    },\r\n    {\r\n        name: 'pink',\r\n        hueRange: [283, 334],\r\n        lowerBounds: [\r\n            [20, 100],\r\n            [30, 90],\r\n            [40, 86],\r\n            [60, 84],\r\n            [80, 80],\r\n            [90, 75],\r\n            [100, 73],\r\n        ],\r\n    },\r\n];\r\n", "export {};\r\n", "import { tinycolor } from './index';\r\nexport * from './index';\r\nexport * from './css-color-names';\r\nexport * from './readability';\r\nexport * from './to-ms-filter';\r\nexport * from './from-ratio';\r\nexport * from './format-input';\r\nexport * from './random';\r\nexport * from './interfaces';\r\nexport * from './conversion';\r\n// kept for backwards compatability with v1\r\nexport default tinycolor;\r\n", "import { TinyColor } from '@ctrl/tinycolor';\r\n\r\nvar hueStep = 2; // \u8272\u76F8\u9636\u68AF\r\n\r\nvar saturationStep = 0.16; // \u9971\u548C\u5EA6\u9636\u68AF\uFF0C\u6D45\u8272\u90E8\u5206\r\n\r\nvar saturationStep2 = 0.05; // \u9971\u548C\u5EA6\u9636\u68AF\uFF0C\u6DF1\u8272\u90E8\u5206\r\n\r\nvar brightnessStep1 = 0.05; // \u4EAE\u5EA6\u9636\u68AF\uFF0C\u6D45\u8272\u90E8\u5206\r\n\r\nvar brightnessStep2 = 0.15; // \u4EAE\u5EA6\u9636\u68AF\uFF0C\u6DF1\u8272\u90E8\u5206\r\n\r\nvar lightColorCount = 5; // \u6D45\u8272\u6570\u91CF\uFF0C\u4E3B\u8272\u4E0A\r\n\r\nvar darkColorCount = 4; // \u6DF1\u8272\u6570\u91CF\uFF0C\u4E3B\u8272\u4E0B\r\n// \u6697\u8272\u4E3B\u9898\u989C\u8272\u6620\u5C04\u5173\u7CFB\u8868\r\n\r\nvar darkColorMap = [{\r\n  index: 7,\r\n  opacity: 0.15\r\n}, {\r\n  index: 6,\r\n  opacity: 0.25\r\n}, {\r\n  index: 5,\r\n  opacity: 0.3\r\n}, {\r\n  index: 5,\r\n  opacity: 0.45\r\n}, {\r\n  index: 5,\r\n  opacity: 0.65\r\n}, {\r\n  index: 5,\r\n  opacity: 0.85\r\n}, {\r\n  index: 4,\r\n  opacity: 0.9\r\n}, {\r\n  index: 3,\r\n  opacity: 0.95\r\n}, {\r\n  index: 2,\r\n  opacity: 0.97\r\n}, {\r\n  index: 1,\r\n  opacity: 0.98\r\n}];\r\n\r\nfunction getHue(hsv, i, light) {\r\n  var hue; // \u6839\u636E\u8272\u76F8\u4E0D\u540C\uFF0C\u8272\u76F8\u8F6C\u5411\u4E0D\u540C\r\n\r\n  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {\r\n    hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;\r\n  } else {\r\n    hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;\r\n  }\r\n\r\n  if (hue < 0) {\r\n    hue += 360;\r\n  } else if (hue >= 360) {\r\n    hue -= 360;\r\n  }\r\n\r\n  return hue;\r\n}\r\n\r\nfunction getSaturation(hsv, i, light) {\r\n  // grey color don't change saturation\r\n  if (hsv.h === 0 && hsv.s === 0) {\r\n    return hsv.s;\r\n  }\r\n\r\n  var saturation;\r\n\r\n  if (light) {\r\n    saturation = hsv.s - saturationStep * i;\r\n  } else if (i === darkColorCount) {\r\n    saturation = hsv.s + saturationStep;\r\n  } else {\r\n    saturation = hsv.s + saturationStep2 * i;\r\n  } // \u8FB9\u754C\u503C\u4FEE\u6B63\r\n\r\n\r\n  if (saturation > 1) {\r\n    saturation = 1;\r\n  } // \u7B2C\u4E00\u683C\u7684 s \u9650\u5236\u5728 0.06-0.1 \u4E4B\u95F4\r\n\r\n\r\n  if (light && i === lightColorCount && saturation > 0.1) {\r\n    saturation = 0.1;\r\n  }\r\n\r\n  if (saturation < 0.06) {\r\n    saturation = 0.06;\r\n  }\r\n\r\n  return Number(saturation.toFixed(2));\r\n}\r\n\r\nfunction getValue(hsv, i, light) {\r\n  var value;\r\n\r\n  if (light) {\r\n    value = hsv.v + brightnessStep1 * i;\r\n  } else {\r\n    value = hsv.v - brightnessStep2 * i;\r\n  }\r\n\r\n  if (value > 1) {\r\n    value = 1;\r\n  }\r\n\r\n  return Number(value.toFixed(2));\r\n}\r\n\r\nfunction generate(color) {\r\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var patterns = [];\r\n  var pColor = new TinyColor(color);\r\n\r\n  for (var i = lightColorCount; i > 0; i -= 1) {\r\n    var hsv = pColor.toHsv();\r\n    var colorString = new TinyColor({\r\n      h: getHue(hsv, i, true),\r\n      s: getSaturation(hsv, i, true),\r\n      v: getValue(hsv, i, true)\r\n    }).toHexString();\r\n    patterns.push(colorString);\r\n  }\r\n\r\n  patterns.push(pColor.toHexString());\r\n\r\n  for (var _i = 1; _i <= darkColorCount; _i += 1) {\r\n    var _hsv = pColor.toHsv();\r\n\r\n    var _colorString = new TinyColor({\r\n      h: getHue(_hsv, _i),\r\n      s: getSaturation(_hsv, _i),\r\n      v: getValue(_hsv, _i)\r\n    }).toHexString();\r\n\r\n    patterns.push(_colorString);\r\n  } // dark theme patterns\r\n\r\n\r\n  if (opts.theme === 'dark') {\r\n    return darkColorMap.map(function (_ref) {\r\n      var index = _ref.index,\r\n          opacity = _ref.opacity;\r\n      var darkColorString = new TinyColor(opts.backgroundColor || '#141414').mix(patterns[index], opacity * 100).toHexString();\r\n      return darkColorString;\r\n    });\r\n  }\r\n\r\n  return patterns;\r\n}\r\n\r\nvar presetPrimaryColors = {\r\n  red: '#F5222D',\r\n  volcano: '#FA541C',\r\n  orange: '#FA8C16',\r\n  gold: '#FAAD14',\r\n  yellow: '#FADB14',\r\n  lime: '#A0D911',\r\n  green: '#52C41A',\r\n  cyan: '#13C2C2',\r\n  blue: '#1890FF',\r\n  geekblue: '#2F54EB',\r\n  purple: '#722ED1',\r\n  magenta: '#EB2F96',\r\n  grey: '#666666'\r\n};\r\nvar presetPalettes = {};\r\nvar presetDarkPalettes = {};\r\nObject.keys(presetPrimaryColors).forEach(function (key) {\r\n  presetPalettes[key] = generate(presetPrimaryColors[key]);\r\n  presetPalettes[key].primary = presetPalettes[key][5]; // dark presetPalettes\r\n\r\n  presetDarkPalettes[key] = generate(presetPrimaryColors[key], {\r\n    theme: 'dark',\r\n    backgroundColor: '#141414'\r\n  });\r\n  presetDarkPalettes[key].primary = presetDarkPalettes[key][5];\r\n});\r\nvar red = presetPalettes.red;\r\nvar volcano = presetPalettes.volcano;\r\nvar gold = presetPalettes.gold;\r\nvar orange = presetPalettes.orange;\r\nvar yellow = presetPalettes.yellow;\r\nvar lime = presetPalettes.lime;\r\nvar green = presetPalettes.green;\r\nvar cyan = presetPalettes.cyan;\r\nvar blue = presetPalettes.blue;\r\nvar geekblue = presetPalettes.geekblue;\r\nvar purple = presetPalettes.purple;\r\nvar magenta = presetPalettes.magenta;\r\nvar grey = presetPalettes.grey;\r\n\r\nexport { blue, cyan, geekblue, generate, gold, green, grey, lime, magenta, orange, presetDarkPalettes, presetPalettes, presetPrimaryColors, purple, red, volcano, yellow };\r\n"],
  "mappings": "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",
  "names": []
}
